// Code generated by go-bindata.
// sources:
// public/app.js
// public/index.html
// public/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x51\x6f\xdb\x36\x10\x7e\x0f\x90\xff\x70\xcd\x06\x50\x86\x5d\x29\x18\xb0\x17\x27\x0a\xd0\x75\x01\xda\xa2\x59\x87\xa6\xdb\xb0\x47\x5a\x3a\x4b\xec\x28\x52\xe0\x9d\xac\x79\x43\xfe\xfb\x40\x4a\xb2\x64\x5b\xc9\x30\x4c\x4f\xd4\xe9\xee\xe3\xc7\xef\x3b\x1d\x0d\xb6\xf0\x6b\x83\xd1\xdf\x97\x17\x00\x00\xa8\xd7\x20\xbe\x91\x75\x2d\x56\x97\x17\x5d\x28\x97\x2c\xd7\xd0\x7f\xf7\x4f\x4b\x6b\x30\x8d\xd6\x2b\x48\x12\xf8\xd4\x38\x68\x71\x43\x36\xfb\x03\x79\xcc\x31\xd8\x3e\x50\xb1\x06\x21\x42\xd6\x3b\xab\x73\xf2\x41\xa8\x90\x48\x16\x48\xc0\x16\x36\x08\x84\x86\xfd\x92\x4b\xbf\x76\x3b\x74\x23\x46\x56\x4a\x7e\x6b\x0d\xa3\xe1\x03\xd0\x1b\x70\x8d\x31\xca\x14\xa0\x15\x31\xd8\x6d\xc8\x1a\x51\x73\x45\xb5\x96\x7b\xcc\xc1\x9a\x0e\x34\x73\x88\x66\x04\xc5\x4a\x2a\x3d\xe1\x7f\xef\xdf\x41\xe6\xb9\x43\x22\x68\x08\x73\xd8\x5a\x07\x85\x93\x9b\x8d\xdf\x46\x1a\x90\x3b\xc9\x72\xc2\xab\x21\x74\x46\x56\x78\xa2\xc2\x10\x1e\x13\xbf\x5a\x65\x30\x5f\xc3\x56\x6a\x42\x9f\xf6\xc5\x35\x08\x6a\xdb\x91\x00\x69\xf2\x43\x11\x94\x72\x87\xb0\x41\x34\xb0\x55\x5a\x63\x0e\xaa\x27\xfd\x74\x30\x22\x73\x28\x39\xe0\x35\x26\x63\x65\x4d\xb4\x98\xda\xb2\x93\x0e\x08\xf5\x16\x52\xe0\x52\xd1\xcd\xf8\xc5\xbf\xc6\x2d\x41\x1a\x1c\xf8\x0d\x37\x8f\xc1\xad\x48\xb4\xb4\x4e\x12\x01\x4b\x68\x95\xc9\x6d\x1b\x6b\x9b\x49\x0f\x1c\x97\x96\x18\x96\x20\x92\x96\xc4\xe2\x1c\x29\x96\x79\x7e\xbf\x43\xc3\x1f\x15\x31\x1a\x74\x91\xe8\x1d\x10\xab\x91\x1d\x1e\xd1\x1b\x28\x56\x54\x40\x0a\x1f\x1e\x3f\xfd\x14\xd7\xd2\x11\x46\x18\xfb\x0e\x9b\xee\xe2\x1f\x7f\x92\x78\xd2\x01\xb0\x4c\x41\xdc\xe6\x6a\x07\x99\x96\x44\xe9\x55\x56\xaa\xfa\xea\x4e\x1c\x57\x0d\xcf\x12\xc4\xad\xaa\x0a\x20\x97\xa5\x57\xfe\x80\x01\xae\x70\x9d\x95\xbf\x7c\xfe\x18\x55\x54\xc4\xc1\x86\x85\x4f\xbe\xba\x13\xa1\xbb\x4e\x9c\x3e\x86\xf4\x25\xe7\x26\x4f\xb7\x4c\x72\xb5\x9b\xa3\xb4\x04\xac\xec\x57\x65\x0d\xc6\x6c\xdf\x57\xb2\xc0\xb0\x7f\xaf\x59\x60\x70\xbb\x71\xc9\x9d\xb8\xf1\x2c\x7e\xf6\xb2\x74\x15\x34\x78\x3f\x55\x10\x35\x56\x5e\x91\x14\x72\x9b\x35\x7e\x19\x17\xc8\xf7\x5d\xf4\x87\xfd\xfb\x3c\x12\x5e\xb8\xd7\xc3\x4f\x21\x4e\xb5\xed\x01\x62\xca\x9c\xd5\xfa\x8b\xad\x21\x3d\x89\xbd\x43\x55\x94\x1c\xd8\xbc\x69\xd8\x42\x17\x1d\x7e\xd4\x8d\x65\xb6\xd5\x88\xf9\x34\x6c\x30\xf6\x6a\x85\x5c\xda\x9c\x8e\xe6\x06\xa1\x99\x34\x2f\x44\x67\xed\xa1\xb6\x10\x85\x0e\xeb\xa6\x07\xbc\x4a\x41\x88\xb3\x2c\x98\xf4\xa1\x87\x8c\xe6\xfd\x0a\x1d\x46\xec\x94\x29\xd4\x76\x1f\xcd\x80\x1c\xe4\xe8\x46\x42\xc0\x0c\xeb\xd5\xf3\xb9\xe3\xbf\x1f\xd2\x87\xd7\x17\x2a\x7a\x17\xd6\xf0\x6d\x24\x6e\xeb\x3b\xb1\x88\x4b\xae\xf4\xf4\x9c\x8b\x98\xf1\x4f\x8e\x16\x5e\xed\x47\x76\xaa\x06\xdb\x30\xf8\xac\x79\xd4\xa7\xf3\xf0\xe2\xd4\xe2\x83\x48\xbd\x94\x5e\xc9\x60\xe7\x67\x24\xe4\x7e\x3c\x1f\x97\x4c\x60\x47\x1f\xa1\x1f\x63\xff\xea\xdb\xab\x51\xbe\x59\xc7\x1e\x24\xa3\x53\x52\xab\xbf\xfc\x3f\x20\x89\x23\xf1\xbb\x6d\xa0\x6a\x88\x01\x0d\xa3\xf3\x93\x16\x5f\x4f\xa7\xb1\x58\xc1\x77\xd7\xd7\xd7\x73\x47\x73\xc8\x8d\x33\xcf\xf2\x3f\x26\x35\x98\xf4\x9f\x79\x65\xa5\xb5\x84\x20\x87\x5b\x05\x3c\xca\xff\x63\x35\xaa\x04\xe9\x5c\x47\x74\x02\xf6\x0d\x71\x33\x53\x7b\xb8\x30\x66\xcb\x0f\x47\x7d\x01\xa1\xbb\x95\xfc\x2d\xe1\x1a\xbc\x79\xce\xf4\xc9\xac\x9c\x5c\x38\xf3\xfe\x76\xe7\x06\x51\x32\xd7\xeb\x24\x69\xdb\xf6\x30\x6a\xe3\xcc\x56\x49\xb7\x0c\x17\xcd\x5b\xb7\xaf\xd9\x7e\x78\x8c\x1f\x7e\xfc\xbe\x47\x9b\x52\xe8\xc7\xc8\xe5\x45\x18\x29\xff\x04\x00\x00\xff\xff\xa1\xa2\xf3\xa9\x9c\x08\x00\x00")

func publicAppJsBytes() ([]byte, error) {
	return bindataRead(
		_publicAppJs,
		"public/app.js",
	)
}

func publicAppJs() (*asset, error) {
	bytes, err := publicAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/app.js", size: 2204, mode: os.FileMode(438), modTime: time.Unix(1509039525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x10\xbd\x07\xc8\x7f\xe0\xf2\xd4\xa2\x10\xd9\x78\xfb\x91\x16\x52\x1a\x20\xbb\x05\x5a\x20\x68\x81\x6e\x0f\x3d\x8e\xc9\x91\x44\x85\x22\x59\x0e\xe5\xac\xf6\xd7\x17\xa2\x2c\xaf\x63\x27\x69\x12\x04\xd8\x93\x47\xc3\xe1\xbc\x37\x7c\x43\x0f\xcb\x37\xef\xfe\xb8\xfa\xf0\xcf\x9f\xef\x59\x9b\x7a\x7b\x71\x7a\x52\x4e\xbf\xcc\x82\x6b\x2a\x8e\x8e\x67\x0f\x82\xbe\x38\x3d\x61\x8c\xb1\xb2\xc7\x04\x4c\xb5\x10\x09\x53\xc5\xff\xfe\xf0\x6b\x71\xce\x97\xb5\x64\x92\xc5\x8b\x2b\x6f\x2d\xac\xfd\x35\xa4\xb6\x94\xb3\xeb\xf4\x64\x1b\x61\x8d\xbb\x61\x11\x6d\xc5\x29\x8d\x16\xa9\x45\x4c\x9c\xb5\x11\xeb\x8a\xb7\x29\x05\xfa\x59\x4a\xa5\x5d\x47\x42\x59\x3f\xe8\xda\x42\x44\xa1\x7c\x2f\xa1\x83\x8f\xd2\x9a\x35\xc9\x1e\x12\x46\x03\xd6\x7c\x42\xf9\xad\xf8\xe9\x47\x71\x2e\x15\xdd\x71\x8b\xde\x38\xa1\x88\x76\xbc\x9e\x82\x5a\x7b\x97\x48\x34\xde\x37\x16\x21\x18\xca\xa8\x46\x79\xf7\x4b\x0d\xbd\xb1\x63\x75\xbd\x05\xf8\xe6\x37\xe5\xdd\xf3\x72\x2b\xed\x44\x47\x1a\xad\xd9\x44\xe1\x30\x49\xec\x7d\x67\xbc\x43\xb9\x12\x2b\xf1\x83\x04\x22\x4c\x94\xcb\x58\x56\x76\x35\xc8\xa7\x00\xc9\xec\x5a\x6a\x3e\x3d\x29\xe5\x56\xb2\x72\xed\xf5\xb8\x48\x88\x71\xc9\xe5\x60\xb3\x35\xf3\xa7\x36\x1b\xa6\x2c\x10\x55\xdc\xc1\xa6\xb8\x8d\x10\x02\x46\xbe\x17\x92\xc3\x60\x41\xe3\x4b\xf4\x3a\x82\xd3\x85\xf5\x8d\x67\xd1\x34\x6d\xe2\x77\xc5\x87\x7d\x10\xa9\xcd\x02\x5a\xca\x99\xc0\x4c\x33\xd3\x2a\x7b\x30\x8e\x19\x5d\x71\x08\x61\x77\xb8\x7b\xc4\xa2\xbf\xe5\x0f\x70\x56\xde\x32\x3a\x5b\x1d\xf1\xdd\x0f\x81\xa8\x59\xeb\xa3\xf9\xe4\x5d\x02\x7b\x18\xba\x0b\x9f\x08\xa8\x16\x52\xd1\x23\x11\x34\x48\x7c\x3f\x43\xa1\xbc\x4b\xe8\x12\x67\x9b\x62\xba\x25\x73\xec\xd5\xd6\x79\x5f\xce\xbd\xa2\x1f\xf2\xdd\x3d\x98\x3d\xfb\xa0\x78\xb6\x29\x4c\x5d\xf1\xce\x1b\x87\xfa\xa1\xa3\x30\x2e\x0c\xa9\xa8\x0d\x5a\xcd\xf2\xb1\x9c\x1f\x9d\x4a\x0e\x61\x69\x0c\x58\xf1\x84\x1f\x73\x31\xbd\xd7\x53\x63\x39\xbc\xbd\xa6\x86\xb3\xcb\x1b\x1c\x87\x20\xd0\x25\x8c\x15\x27\x74\x77\xf1\x0e\x0b\x78\x0c\xff\xbb\x23\xfc\xf5\x90\x92\x77\xcb\x86\x5b\xd8\x20\x15\x58\xd7\xa8\x12\x9b\x3f\xec\xd4\x49\x6c\x9d\x1c\x67\x97\xca\x1a\x75\x73\x4c\xe1\x73\x31\x4b\x9e\xe5\xfa\x17\xd3\x95\xa5\xa5\x1b\x27\x79\x4a\x69\xee\xd9\xf9\x17\x3a\x7d\xa8\xcb\xcc\xec\xe5\xd2\xbc\x79\x55\x6d\xb0\x07\x63\x77\xe2\x88\x14\x4d\xbf\x73\x06\x0b\x0a\x5b\x6f\xf5\xa4\xcf\xfb\x22\x3b\x5f\xaa\xd0\x33\x3a\x64\x4b\x62\x20\x8c\x0e\x7a\x3c\xe0\xf1\xce\x50\xb0\x30\xb2\xbc\xf4\x65\xfb\x65\x12\xe2\xab\xaf\x5f\xd2\x31\xda\x3b\xbc\xbf\x63\x7e\xf7\xc6\xbd\xa8\x63\x4a\x39\xfd\xb7\x4d\x46\xed\x7d\xc2\xb8\x10\x08\xd0\x60\x31\xbb\xf2\x94\x95\xb3\x3d\x99\xa4\xa2\x09\x89\x51\x54\x9f\x87\xc8\xe0\xc2\x4d\x93\xa7\xd2\x66\xc0\xcb\x95\x38\x13\x6f\xa5\x36\x94\xa6\xcf\x3c\x2d\x3a\xe2\x17\xa5\x9c\xb7\x3e\x94\xe4\xff\x26\x91\x35\x6b\xd9\x1d\x4c\xa1\x27\xe5\xf5\x1a\x45\xf7\xef\x80\x71\xcc\x14\x67\xb3\x98\x58\x9e\x3d\x87\xdc\x63\x83\x5f\xc5\x31\x24\x5f\x74\x24\xdf\x8a\x33\xb1\x92\xd1\x5b\x3b\x04\x92\xbd\xfe\xfe\x35\xd2\xdf\xf3\xae\xe8\x8e\x9f\x15\x8f\x01\x49\x08\xe1\x28\x40\x2e\x13\x58\x6e\xdf\x57\xff\x05\x00\x00\xff\xff\x8e\x5e\x13\x0e\x71\x09\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 2417, mode: os.FileMode(438), modTime: time.Unix(1509039525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xc1\x0a\xc3\x20\x0c\xc6\xf1\xbb\xe0\x3b\x04\xc6\x8e\x42\x7b\xd9\xc1\x3e\x8d\x53\x5b\x03\xd1\x8c\x6a\xdb\x95\xb1\x77\x1f\x6e\x75\x63\xd7\x1f\x7f\xf2\xe5\xca\x6e\x87\x87\x14\x00\x00\x0e\xf3\x8d\xcc\xae\x61\x24\x7f\x1f\x3e\x16\x31\xa9\xe0\x71\x0a\x45\x43\xdf\x75\x6b\x38\xbc\x26\xca\xe1\xec\x6d\x41\x4e\x1a\x2c\xd3\x12\xd3\x20\xc5\x53\x0a\x29\xa2\xc1\xd4\xae\xd6\x52\x43\x0f\x1d\x98\xa5\x70\x2b\x4e\x36\x98\xa2\xa2\xcf\xd9\x4c\x3e\xb7\xf6\x7f\xed\x3b\xd6\xe8\xf2\xa3\x0d\x5d\x09\xef\x97\xce\x87\xf0\xea\xe7\x91\x78\x53\xbb\x86\x6c\x67\x26\xaa\x5b\xaf\x00\x00\x00\xff\xff\xea\x87\x4f\x49\xe0\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 224, mode: os.FileMode(438), modTime: time.Unix(1509039515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/app.js": publicAppJs,
	"public/index.html": publicIndexHtml,
	"public/style.css": publicStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{publicAppJs, map[string]*bintree{}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

