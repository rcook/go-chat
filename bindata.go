// Code generated by go-bindata.
// sources:
// public/app.js
// public/index.html
// public/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xcd\x06\x50\x46\x52\x39\x18\xb0\x17\x27\x0e\xd0\x75\x01\xda\xa2\x59\x87\xa6\xdb\xb0\x47\x5a\x3a\x4b\xec\x28\x52\x20\x29\x6b\xd9\x90\xff\x7d\x77\xd4\x0f\xcb\xb6\x82\x61\x18\x9f\x28\xea\xf8\xf1\xe3\xf7\xdd\x1d\x0d\xb6\xf0\x6b\x83\xc9\xdf\x0b\xa0\x81\x7a\x0d\xe2\x1b\x59\xd7\xe2\x6a\x11\x17\x72\x19\xe4\x1a\xba\x9f\x3c\x5a\xbf\x06\xd3\x68\x7d\x05\xab\x15\x7c\x6a\x1c\xb4\xb8\xf5\x36\xfb\x03\xc3\x18\x42\x88\x0f\xbe\x20\x1c\x11\x83\xde\x59\x9d\x7b\x5e\x84\x0a\xbd\x97\x05\x7a\x08\x16\xb6\x08\x1e\x4d\xe0\x69\x28\x79\xee\xf6\xe8\x46\x88\xac\x94\xe1\xad\x35\x81\x22\x46\x9c\x37\xe0\x1a\x63\x94\x29\x40\x2b\x1f\xc0\xee\x62\xd4\x01\x34\x57\xbe\xd6\xf2\x09\x73\xb0\xa6\xc3\xcc\x1c\xa2\x19\x31\xb1\x92\x4a\x4f\xc8\xdf\xf3\x37\xc8\x3c\x77\x84\x00\x8d\xa7\x8d\x3b\xeb\xa0\x70\x72\xbb\xe5\x53\xa4\x01\xb9\xa7\xdb\x1f\x58\x51\x8c\x33\xb2\xc2\x13\x05\x86\xe5\x31\xee\xab\x55\x06\xf3\x35\xec\xa4\xf6\xc8\x51\x5f\x5c\x83\xa0\x76\x1d\x05\x02\xce\xc7\x3d\x50\xca\x3d\x92\x18\x68\x60\xa7\xb4\x26\x0e\xaa\x63\xfc\xdc\xeb\x4f\x77\x90\x21\x82\x35\x26\x0b\xca\x9a\x64\x39\x71\x63\x2f\x1d\x49\xa7\x77\xb0\xa1\x1b\x2b\x7f\x33\xfe\xe0\xaf\xb4\xf5\xb4\xce\xc2\xff\x86\xdb\xc7\xe8\x51\x22\xc8\xbf\xd5\x4a\xc0\x25\xb4\xca\xe4\xb6\x4d\xb5\xcd\x24\xc3\xa6\xa5\x25\x51\x2f\x41\xac\x5a\x2f\x96\x67\x40\x29\xe9\x74\xbf\x27\x3b\x3e\x92\xf6\x68\xd0\x25\xa2\x17\x9e\xcc\x19\xa9\xe1\x94\xdb\xc0\xaf\xf2\x05\xd1\xf8\xf0\xf8\xe9\xa7\xb4\x96\xce\x63\x82\x29\x27\xd5\xe4\x0c\x1e\x7c\x8b\x74\x62\x3b\x5c\x6e\x40\xdc\xe6\x6a\x0f\x99\x96\xde\x6f\x2e\xb2\x52\xd5\x17\x77\xe2\x68\xd3\x30\x88\xf6\xad\xaa\x0a\xf0\x2e\xdb\x5c\xf0\xe5\x22\x1a\x39\x19\xfd\xfb\xe5\xf3\xc7\x84\x48\xa4\x51\xfd\x25\x07\x13\x4e\xcc\xa8\x63\x7b\x8f\x11\x79\xc7\x99\xb3\xd3\x03\x57\x44\x6e\x86\xcf\x25\xb9\x6c\xbf\x92\x1a\x98\x06\xfb\xbe\x22\x85\xe2\xe1\xbd\x5a\xf1\xf8\xdb\xad\x5b\xdd\x89\x1b\xa6\xf0\x33\x2b\xd2\xed\xf0\x8b\x33\xe9\x50\x63\xc5\x5a\x6c\x20\xb7\x59\xc3\xd3\xb4\xc0\x70\xdf\xad\xfe\xf0\xf4\x3e\x4f\x04\x4b\xf6\x7a\xa8\x01\x71\x22\x6a\xbf\x3f\xa5\x4a\xb0\x5a\x7f\xb1\x35\x21\x1d\xaf\xbd\x43\x55\x94\x21\x52\x79\xd3\x50\x2d\x76\xab\x43\x55\x6e\x6d\x08\xb6\x1a\x21\x9f\x7b\xf8\x21\x37\x2b\x0c\xa5\xcd\xfd\xb4\x3d\x50\x4d\x4f\x72\x15\x92\xd3\x84\xa0\x22\x48\x62\x4a\x75\x4d\x02\x5e\x91\xcb\xe2\x34\x88\xc7\x90\x77\x0c\x98\xcc\x5a\x14\x33\xca\x07\x47\xb5\xaa\x76\x4f\xc9\x39\xc4\xa8\x42\x57\xf8\x11\x31\xce\xaf\x5e\x0c\x3d\x54\x78\x8c\x1e\x3e\x5f\xde\xd0\x2b\xbf\x86\x6f\x13\x71\x5b\xdf\x89\x65\x5a\x86\x4a\x4f\xaf\xb8\x4c\x03\xfe\x19\x48\x08\x92\xf8\x91\xd8\xd6\x60\x9b\x00\x1c\x35\x0b\xfa\x7c\xb6\xba\x3c\x31\x95\xc7\x54\x42\x56\x30\x1a\xf8\x19\x3d\x86\xbe\xfb\x2e\xe6\x31\x07\xe7\x78\x70\x97\xfa\x37\xab\x5e\x1d\x44\x9b\x33\xe9\x81\x5a\x93\x53\x52\xab\xbf\x38\xd9\xa5\xa7\xfe\xf2\xbb\x6d\xa0\x6a\xa8\x95\x50\x8e\xa1\xe3\x26\x8a\xaf\xa7\x8d\x96\xda\xc5\x77\xd7\xd7\xd7\x33\x77\x72\x18\x1a\x67\x5e\x20\x7e\x4c\x68\xf0\xe5\xbf\x72\xca\x4a\x6b\xa9\xdc\xe4\xf0\x56\x00\x83\xfc\x0f\x46\x07\x75\xc8\x85\x99\x0c\xe8\x84\xeb\x13\xe0\xe6\x7c\xeb\xf8\x0a\xcc\xee\x1e\x6f\xf9\x32\x40\xf7\xd2\x70\xf7\xa7\x17\xe6\x66\xd6\xe6\x49\x17\x9c\x3c\x22\xb3\x96\x76\xf7\x05\x51\x86\x50\xd3\x2b\xd1\xb6\xed\xd8\x43\xd3\xcc\x56\xab\x6e\x1a\x5f\x8f\xb7\xee\xa9\x0e\xf6\xc3\x63\xfa\xf0\xe3\xf7\x3d\xd8\xe4\xf8\xae\x4b\x2c\xb8\x5f\xfc\x13\x00\x00\xff\xff\xa1\xd7\x3a\x2a\x5f\x08\x00\x00")

func publicAppJsBytes() ([]byte, error) {
	return bindataRead(
		_publicAppJs,
		"public/app.js",
	)
}

func publicAppJs() (*asset, error) {
	bytes, err := publicAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/app.js", size: 2143, mode: os.FileMode(436), modTime: time.Unix(1508984212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4b\x6f\xdb\x38\x10\xbe\xfb\x57\x30\x3c\xed\x62\x21\x72\xe3\xec\x23\xbb\x90\xd2\x00\x49\x0a\xb4\x40\xd0\x02\x4d\x0f\x3d\xd2\xd2\x48\xa2\x4c\x91\x2a\x49\xd9\x51\x7e\x7d\x47\x2f\x3f\x14\x27\x75\x82\x00\xf5\xc5\xe4\x70\x34\xdf\x37\xf3\x8d\x38\x0a\x4f\xae\x3f\x5d\xdd\x7d\xfb\x7c\x43\x72\x5f\xaa\x8b\x59\xd8\xfe\x11\x25\x74\x16\x51\xd0\xb4\x35\x80\x48\x2e\x66\x04\x7f\x61\x09\x5e\x90\x38\x17\xd6\x81\x8f\xe8\xd7\xbb\xf7\xc1\x39\x1d\x8e\xbc\xf4\x0a\x2e\xae\x8c\x52\x62\x61\x6e\x85\xcf\x43\xde\x9b\x66\xfd\xb9\x92\x7a\x49\x2c\xa8\x88\x3a\xdf\x28\x70\x39\x80\xa7\x24\xb7\x90\x46\x34\xf7\xbe\x72\xff\x73\x1e\x27\xba\x70\x2c\x56\xa6\x4e\x52\x25\x2c\xb0\xd8\x94\x5c\x14\xe2\x9e\x2b\xb9\x70\xbc\x14\x1e\xac\x14\x4a\x3e\x00\xff\x93\xfd\xf7\x2f\x3b\xe7\xb1\xdb\x33\xb3\x52\x6a\x86\xb6\x91\xd4\x31\xa0\xa9\xd1\xde\xb1\xcc\x98\x4c\x81\xa8\xa4\xeb\x40\x65\x6c\xf4\xbb\x54\x94\x52\x35\xd1\xed\x10\xff\x8f\x0f\x68\x7c\x51\x68\xcc\x87\x15\x2e\x01\x25\x57\x96\x69\xf0\x1c\x4a\x53\x48\xa3\x81\xcf\xd9\x9c\xfd\xc3\x85\xc3\x3a\xba\x2e\x89\xf1\x64\x93\x01\x3f\x02\x87\x77\xa6\x21\xe1\x59\xc8\x7b\xa5\xc2\x85\x49\x9a\x41\x37\xb0\x43\x18\x2d\x56\xfd\xaa\xdb\x25\x72\x45\x62\x85\xf0\x11\xc5\x83\x60\x6d\x45\x55\x81\xa5\x5b\x8f\xce\x4b\x8c\x30\x74\x74\x5e\x58\xa1\x93\x40\x99\xcc\x10\x2b\xb3\xdc\xd3\x7d\xc1\xc5\x0e\x04\x47\x8c\x01\x9b\x77\xe0\x3d\xbd\x96\x50\x58\x0a\xa9\x89\x4c\x22\x8a\xb0\x63\x3d\x77\x28\x59\xb3\xa6\x87\xc9\xc6\x46\x11\x77\x3a\x9f\x12\xdd\xf5\x10\x36\x21\xb9\xb1\xf2\x01\x65\x15\x6a\xe2\xb9\xf1\x6e\xc1\xb1\x8f\x7d\x50\x82\x73\x22\x03\x47\x77\x03\x04\x28\xb4\x07\x8d\x75\x5e\x05\xed\xeb\xd0\xfb\x5e\x0d\xc6\x03\x21\xb7\xc9\x3e\x61\xda\x2b\xc7\x76\x39\x49\x1a\xe1\x24\xd6\xbb\x30\x52\x43\xf2\x44\x09\xa4\xae\x6a\x1f\xa4\x12\x54\x42\xba\x72\x9c\x4f\xab\xd1\x79\x10\xdf\x54\x10\x51\x0f\xf7\x5d\x16\xa5\x49\xda\x16\xd2\xb0\xbe\x75\x19\x25\x97\x4b\x68\xea\x8a\x61\x36\x60\xb1\xb1\x40\xef\xa1\x4d\xa8\x3f\x07\xfe\xd7\x14\x7c\x51\x7b\x6f\xf4\xe8\xbf\x16\x2b\x70\x01\xa4\x29\xc4\x9e\xf4\x1b\xd5\xf6\x0d\x59\x78\x8d\x2c\x62\x25\xe3\xe5\x23\xfc\x6d\x22\x63\x98\xf1\x0d\x0f\xda\xd7\xd2\x8d\xad\xd7\x6a\x12\x72\xf9\xf8\xc1\x2f\x18\x6f\x22\x46\x4f\xeb\x95\x7a\x9c\xbc\xa1\x20\x80\xbd\xaf\x36\x8a\x30\x6f\x65\xb9\x31\x56\x4a\xc4\x90\x1b\x95\xb4\xa2\xdc\x04\x9d\xf1\x75\xb2\x1c\xdf\x13\x03\x83\xda\x81\xd5\xa2\x84\x09\x89\x6b\xe9\x70\xdf\x90\xee\xe8\x17\x76\x48\x2b\xc0\x6f\xbf\xbf\xa2\x47\x12\xbc\x52\x0f\xf6\xc8\x47\x8c\xf8\xe2\x1e\x09\x79\x7b\x73\xe1\x7f\x6a\x0c\xa2\x8d\xd0\x15\x5e\x20\x41\x6f\x6a\xe7\x25\xef\x97\xb8\x72\xb1\x95\x95\x27\xce\xc6\xdb\x99\x50\xeb\x6a\x99\x75\x33\x66\x55\xc3\xe5\x9c\x9d\xb2\x33\x0c\xee\x7c\xbb\xed\x2e\xff\x02\x2f\xf3\x90\xf7\x8f\x3e\x11\xe3\x67\x73\x05\xa7\x25\x2f\x26\x33\xe5\x98\xb0\xd8\x10\xac\xf8\x5e\x83\x6d\x3a\x82\xfd\x32\x68\x39\x9e\xbe\x80\xda\x73\x23\x3c\xb6\x4d\xe5\x4d\x80\xe4\xce\x30\xe6\x9c\x5b\x1c\x1f\x75\x85\x33\x3c\xf9\xfb\x0d\xa2\x1f\xf8\x40\x28\x1e\x7f\x1f\x3c\x83\xc3\x71\x20\x4d\xcf\xf9\x30\x4e\x79\xff\x7d\xf4\x23\x00\x00\xff\xff\x13\x20\x71\x23\x30\x09\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 2352, mode: os.FileMode(436), modTime: time.Unix(1508984171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\xc1\x0e\x82\x30\x0c\x86\xef\x7b\x8a\x26\xc6\xe3\x12\xbc\x78\x80\xa7\x99\x5b\x61\x4d\xba\xd5\xb0\x01\x12\xe3\xbb\x3b\x06\x98\xd8\xe3\xd7\xbf\xfd\xfe\x87\xb8\x15\xde\x0a\xca\x38\x4a\x4f\x36\x6b\x0b\x3d\xe3\xab\xab\x28\x50\xd4\x1e\x69\xf0\xb9\x85\x5b\xd3\xcc\x7e\xc7\x5b\x40\x3b\x1a\xd1\x66\x92\xd8\x82\x15\x9e\x42\xec\xd4\x47\xa9\x60\x28\x1e\xff\xb6\x54\x39\x83\x06\xcc\x94\xa5\x6e\x2f\xd6\x9b\xac\x03\xa6\x64\x06\x4c\x47\xee\x5f\x72\x3a\x4e\x72\xff\x91\x85\x5c\xf6\xb5\xc7\x75\x07\x32\xe3\xd8\xb3\x2c\xba\x74\x4e\x76\x14\xe6\x22\xf9\x06\x00\x00\xff\xff\xa4\x44\x4d\x2f\xd1\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 209, mode: os.FileMode(436), modTime: time.Unix(1508979693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/app.js": publicAppJs,
	"public/index.html": publicIndexHtml,
	"public/style.css": publicStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{publicAppJs, map[string]*bintree{}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

