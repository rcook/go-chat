// Code generated by go-bindata.
// sources:
// public/app.js
// public/index.html
// public/style.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\xb6\x05\x28\xc3\x5b\x69\x51\xa0\x17\x7f\x2c\x90\xa6\x0b\x24\x41\xb6\x29\xe2\xb4\x45\x8f\xb4\x34\x96\x98\x52\xa4\x40\x52\x56\xdd\x62\xff\x7b\x87\xd4\x87\x65\x5b\x46\x51\x84\x27\x99\x9e\x79\x7c\x7c\x6f\x66\xa8\xb0\x81\xdf\x6a\x8c\xfe\x99\x01\x2d\x94\x4b\x60\xdf\xf0\xaa\x62\xf7\xb3\xb0\x91\x71\xc7\x97\xd0\xfe\xe9\x57\x63\x97\xa0\x6a\x29\xef\x21\x49\xe0\x63\x6d\xa0\xc1\x9d\xd5\xe9\x9f\xe8\x86\x10\x42\x7c\xb6\x39\xe1\xb0\x10\xf4\x56\xcb\xcc\xfa\x4d\x28\xd1\x5a\x9e\xa3\x05\xa7\x61\x87\x60\x51\x39\xff\xe9\x0a\xff\x6d\x0e\x68\x06\x88\xb4\xe0\xee\x8d\x56\x8e\x22\x06\x9c\xd7\x60\x6a\xa5\x84\xca\x41\x0a\xeb\x40\xef\x43\xd4\x09\x34\x13\xb6\x92\xfc\x88\x19\x68\xd5\x62\xa6\x06\x51\x0d\x98\x58\x72\x21\x47\xe4\x9f\xfc\x6f\xe0\x59\x66\x08\x01\x6a\x4b\x89\x7b\x6d\x20\x37\x7c\xb7\xf3\xa7\x70\x05\xfc\x40\xb7\x3f\xb1\xa2\x18\xa3\x78\x89\x17\x0a\xf4\xdb\x43\xdc\x17\x2d\x14\x66\x4b\xd8\x73\x69\xd1\x47\x7d\x36\x35\x82\xd8\xb7\x14\x08\x38\x1b\x72\xa0\xe0\x07\x24\x31\x50\xc1\x5e\x48\x49\x1c\x44\xcb\xf8\xa5\xd3\x9f\xee\xc0\x5d\x00\xab\x55\xea\x84\x56\xd1\x7c\xe4\xc6\x81\x1b\x92\x4e\xee\x61\x43\x37\x16\x76\x35\xfc\xe1\x7f\xc5\x8d\xa5\x7d\x2f\xfc\xef\xb8\xdb\x06\x8f\x22\x46\xfe\x25\x09\x83\x05\x34\x42\x65\xba\x89\xa5\x4e\xb9\x87\x8d\x0b\x4d\xa2\x2e\x80\x25\x8d\x65\xf3\x2b\xa0\x98\x74\x7a\x3a\x90\x1d\x1f\x48\x7b\x54\x68\x22\xd6\x09\x4f\xe6\x0c\xd4\x70\xcc\xad\xe7\x57\xda\x9c\x68\xbc\xdf\x7e\xfc\x39\xae\xb8\xb1\x18\x61\xec\x8b\x6a\x74\x86\x5f\xfe\x16\xf1\xc8\x76\x58\x6c\x80\xad\x33\x71\x80\x54\x72\x6b\x37\x77\x69\x21\xaa\xbb\x47\x76\x96\xd4\x2f\xa2\xbd\x16\x65\x0e\xd6\xa4\x9b\x3b\x7f\xb9\x80\x46\x4e\x06\xff\x7e\xfd\xf4\x21\x22\x12\x71\x50\x7f\xee\x83\x09\x27\x54\xd4\xb9\xbd\xe7\x88\x3e\xe3\xca\xd9\xf1\x81\x09\x91\x9b\xe0\xb3\x20\x97\xf5\x17\x52\x03\x63\xa7\xdf\x95\xa4\x50\x38\xbc\x53\x2b\x1c\xbf\xde\x99\xe4\x91\xad\x3c\x85\x5f\xbc\x22\x6d\x86\x9d\x5d\x49\x87\x12\x4b\xaf\xc5\x06\x32\x9d\xd6\xfe\x33\xce\xd1\x3d\xb5\xbb\x3f\x1e\xdf\x65\x11\xf3\x92\x7d\xd7\xf7\x00\xbb\x10\xb5\xcb\x8f\xa9\x13\xb4\x94\x9f\x75\x45\x48\xe7\x7b\x6f\x51\xe4\x85\x0b\x54\x5e\xd7\xd4\x8b\xed\x6e\xdf\x95\x3b\xed\x9c\x2e\x07\xc8\x97\x0e\xbe\xaf\xcd\x12\x5d\xa1\x33\x3b\x1e\x0f\xd4\xd3\xa3\x5a\x85\xe8\xb2\x20\xa8\x09\xa2\x50\x52\xed\x90\x80\x57\xe4\x32\xbb\x0c\xf2\xab\xaf\x3b\x0f\x18\x4d\x5a\x14\x2a\xca\x3a\x43\xbd\x2a\xf6\xc7\xe8\x1a\x62\x50\xa1\x6d\xfc\x80\x18\xbe\xef\x6f\x86\x9e\x3a\x3c\x44\xf7\x3f\x6f\x27\x74\xca\x2f\xe1\xdb\x88\xad\xab\x47\x36\x8f\x0b\x57\xca\xf1\x15\xe7\xb1\xc3\xbf\x1c\x09\x41\x12\x6f\x89\x6d\x05\xba\x76\xe0\xa3\x26\x41\x5f\xae\x76\xe7\x17\xa6\xfa\x35\x96\xd0\x2b\x18\x0c\xfc\x84\x16\x5d\x37\x7d\x67\xd3\x98\xbd\x73\x7e\xf9\x29\xf5\x5f\x56\xbd\x3a\x89\x36\x65\xd2\x33\x8d\x26\x23\xb8\x14\x7f\xfb\x62\xe7\x96\xe6\xcb\x1f\xba\x86\xb2\xa6\x51\x42\x35\x86\xc6\x0f\xd1\x90\x4d\x53\xe2\xfb\x87\x87\x87\x89\xab\x18\x74\xb5\x51\x37\xf8\x9e\xf3\xe8\xed\xf8\xbf\x54\xd2\x42\x6b\xea\x32\x3e\xd8\xfb\x15\x6c\x4e\x82\x90\xf0\x13\xa6\xb7\x5a\x75\x9e\xaf\xae\x53\x87\xc1\x3f\x99\x3d\xdc\xf0\x36\x40\xfb\xb8\xf8\x81\x4f\x8f\xca\x6a\xd2\xd9\xd1\xe0\x1b\xbd\x1b\x93\x2e\xb6\xf7\x05\x56\x38\x57\xd1\xc3\xd0\x34\xcd\x30\x36\xe3\x54\x97\x49\xfb\x19\x1e\x8c\x37\xe6\x58\x39\xfd\x7e\x1b\x3f\xff\xf4\x43\x07\x36\x3a\xbe\x1d\x0c\x33\x1a\x11\xff\x06\x00\x00\xff\xff\x02\xff\x84\x86\x51\x08\x00\x00")

func publicAppJsBytes() ([]byte, error) {
	return bindataRead(
		_publicAppJs,
		"public/app.js",
	)
}

func publicAppJs() (*asset, error) {
	bytes, err := publicAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/app.js", size: 2129, mode: os.FileMode(436), modTime: time.Unix(1508979693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x49\x6f\xdb\x3c\x10\xbd\xfb\x57\x30\x3c\x7d\x1f\x0a\x91\x8d\xd3\x25\x2d\xa4\x34\x40\x9a\x02\x2d\x10\xb4\x40\x93\x43\x8f\xb4\x34\x92\x28\x53\xa4\x4a\x52\x76\x9c\x5f\xdf\xd1\xe6\x45\x71\x52\x27\x08\x50\x5f\x4c\x0d\x47\xef\xbd\x59\xc4\x61\x78\xf4\xf9\xfb\xc5\xf5\xaf\x1f\x97\x24\xf7\xa5\x3a\x9b\x84\xcd\x1f\x51\x42\x67\x11\x05\x4d\x1b\x03\x88\xe4\x6c\x42\xf0\x17\x96\xe0\x05\x89\x73\x61\x1d\xf8\x88\xde\x5c\x7f\x09\x4e\x69\xbf\xe5\xa5\x57\x70\x76\x61\x94\x12\x33\x73\x25\x7c\x1e\xf2\xce\x34\xe9\xf6\x95\xd4\x73\x62\x41\x45\xd4\xf9\x95\x02\x97\x03\x78\x4a\x72\x0b\x69\x44\x73\xef\x2b\xf7\x91\xf3\x38\xd1\x85\x63\xb1\x32\x75\x92\x2a\x61\x81\xc5\xa6\xe4\xa2\x10\xb7\x5c\xc9\x99\xe3\xa5\xf0\x60\xa5\x50\xf2\x0e\xf8\x6b\xf6\xe1\x3d\x3b\xe5\xb1\xdb\x31\xb3\x52\x6a\x86\xb6\x41\xd4\x21\xa4\xa9\xd1\xde\xb1\xcc\x98\x4c\x81\xa8\xa4\x6b\x49\x65\x6c\xf4\xa7\x54\x94\x52\xad\xa2\xab\x1e\xff\xd5\x57\x34\x3e\x09\x1a\xe3\x61\x85\x4b\x40\xc9\x85\x65\x1a\x3c\x87\xd2\x14\xd2\x68\xe0\x53\x36\x65\xef\xb8\x70\x98\x47\xd7\x06\x31\xec\xac\x23\xe0\x07\xf0\xf0\xd6\xd4\x07\x3c\x09\x79\x57\xa9\x70\x66\x92\x55\x5f\x37\xb0\x3d\x8c\x16\x8b\x6e\xd5\x3e\x25\x72\x41\x62\x85\xf4\x11\xc5\x8d\x60\x69\x45\x55\x81\xa5\x1b\x8f\xd6\x4b\x0c\x34\x74\x70\x9e\x59\xa1\x93\x40\x99\xcc\x10\x2b\xb3\xdc\xd3\xdd\x82\x8b\x2d\x0a\x8e\x1c\x3d\x37\x6f\xc9\x3b\x79\x8d\xa0\xb0\x14\x52\x13\x99\x44\x14\x69\x87\x7c\x6e\x49\xb2\x66\x49\xf7\x8b\x8d\x8d\x22\xee\x78\x3a\x16\xba\xed\x21\x6c\x42\x72\x63\xe5\x1d\x96\x55\xa8\x91\xe7\xda\xbb\x21\xc7\x3e\xf6\x41\x09\xce\x89\x0c\x1c\xdd\x06\x08\xb0\xd0\x1e\x34\xe6\x79\x11\x34\x9f\x43\xe7\x7b\xd1\x1b\xf7\x40\x6e\x82\x7d\xc0\xb4\x93\x8e\xcd\x72\x14\x34\xd2\x49\xcc\x77\x61\xa4\x86\xe4\x81\x14\x48\x5d\xd5\x3e\x48\x25\xa8\x84\xb4\xe9\x38\x1d\x67\xa3\xf5\x20\x7e\x55\x41\x44\x3d\xdc\xb6\x51\x94\x26\x69\x5a\x48\xc3\xf2\xca\x65\x94\x9c\xcf\x61\x55\x57\x0c\xa3\x01\x8b\x8d\x05\x7a\x87\x6d\x24\xfd\x31\xf2\x37\x63\xf2\x59\xed\xbd\xd1\x83\xff\x52\x2c\xc0\x05\x90\xa6\x10\x7b\xd2\x3d\xa8\xa6\x6f\xc8\xcc\x6b\x54\x11\x2b\x19\xcf\xef\xf1\x6f\x02\x19\x60\x86\x2f\x3c\x68\x3e\x4b\x37\xb4\x5e\x53\x93\x90\xcb\xfb\x2f\xfe\x44\xbc\x51\x31\x3a\x59\xcf\xac\xc7\xd1\x0b\x16\x04\xb0\xf7\xd5\xba\x22\xcc\x5b\x59\xae\x8d\x95\x12\x31\xe4\x46\x25\x4d\x51\x2e\x5b\xdb\xf3\xaa\x72\x78\x4b\xf4\x02\x6a\x07\x56\x8b\x12\x46\x1a\x6e\x06\xf3\x3f\x6c\x8e\x26\xf7\xff\xfd\xff\x8c\xf6\x48\xf0\x34\xdd\xdb\x1e\xdf\x10\xf1\xc9\xed\x11\xf2\xe6\xd0\xc2\xff\xd4\x18\x64\x1b\xa8\x2b\x3c\x3b\x82\xce\xd4\x8c\x4a\xde\x2d\x71\xe5\x62\x2b\x2b\x4f\x9c\x8d\x37\xe3\xa0\xd6\xd5\x3c\x6b\xc7\xcb\xa2\x86\xf3\x29\x3b\x66\x27\x08\xee\x7c\xf3\xd8\x9e\xfb\x05\x9e\xe3\x21\xef\x5e\x7d\x00\xe3\x6f\x23\x05\x07\x25\x2f\x46\xe3\xe4\x10\x58\x6c\x06\x56\xfc\xae\xc1\xae\x5a\x81\xdd\x32\x68\x34\x1e\x3f\x41\xda\x63\xd3\x3b\xb6\xab\xca\x9b\x00\xc5\x9d\x20\xe6\x94\x5b\x9c\x1c\x75\x85\xe3\x3b\x79\xfb\x02\xe8\x7b\xee\x06\xc5\xfd\xab\xc1\x23\x3c\x1c\x67\xd1\x78\x9f\xf7\x93\x94\xb7\x57\xa3\x3f\x01\x00\x00\xff\xff\xac\x92\xca\xcb\x2a\x09\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 2346, mode: os.FileMode(436), modTime: time.Unix(1508984005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\xc1\x0e\x82\x30\x0c\x86\xef\x7b\x8a\x26\xc6\xe3\x12\xbc\x78\x80\xa7\x99\x5b\x61\x4d\xba\xd5\xb0\x01\x12\xe3\xbb\x3b\x06\x98\xd8\xe3\xd7\xbf\xfd\xfe\x87\xb8\x15\xde\x0a\xca\x38\x4a\x4f\x36\x6b\x0b\x3d\xe3\xab\xab\x28\x50\xd4\x1e\x69\xf0\xb9\x85\x5b\xd3\xcc\x7e\xc7\x5b\x40\x3b\x1a\xd1\x66\x92\xd8\x82\x15\x9e\x42\xec\xd4\x47\xa9\x60\x28\x1e\xff\xb6\x54\x39\x83\x06\xcc\x94\xa5\x6e\x2f\xd6\x9b\xac\x03\xa6\x64\x06\x4c\x47\xee\x5f\x72\x3a\x4e\x72\xff\x91\x85\x5c\xf6\xb5\xc7\x75\x07\x32\xe3\xd8\xb3\x2c\xba\x74\x4e\x76\x14\xe6\x22\xf9\x06\x00\x00\xff\xff\xa4\x44\x4d\x2f\xd1\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 209, mode: os.FileMode(436), modTime: time.Unix(1508979693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/app.js": publicAppJs,
	"public/index.html": publicIndexHtml,
	"public/style.css": publicStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{publicAppJs, map[string]*bintree{}},
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

